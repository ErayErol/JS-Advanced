Обща култура:
Паметта в PC
Stack & Heap
Stack => dedicate-ната памет специално за нашата програма javascript програма, която run-ваме 

Heap => допълнително достъпна система памет, която е РАМ паметта на компютъра,
където ние можем допълнително да достъпваме и да локираме там данни, които да ги слагаме

Когато изпълнем да кажем функция solve, стека подрежда scope-ове, в който вътре си има своите scope променливи, 
които са характерни за този scope, това е всичко което използваме в рамките на function scope-a => каквото декларираме се държи там
let num = 5; => тази стойност стои в Stack => защото е value type
let names = (тук не стоят данните, тук стои една референция => адрес => който е някъде в паметта в Heap-a се създава
['pesho', 'gosho'], и референцията сочи към => ['pesho', 'gosho'], стойноста стои в Heap-a)
scope
=> https://www.w3schools.com/js/js_scope.asp

JavaScript
=> Се изпълнява от интерпретатор V8(или подобен), изпълнява кода и дава резултат
=> Динамичен скриптен език
Скриптов => директно се изпълнява от source code (не се компилира)
source code => се чете от интерпретатора и директно се изпълнява(стандартно се изпълнява в браузър)
NodeJS =>е този RunTime, който изпълнява JS локално => не в контекста на браузъра
Динамичен
=> Нямаме конкретен type cheking на променливите и една променлива 
не е задължително да съдържа в себе си точно определен тип данни
=> Променливите не се декларират с тип (те сочат към стойноста)

Интерпретатор
=> чете source code => произвежда резултат

Компилатор
=> source code => компилация, която довежда до изпълними файлове, които ние изпълняваме и те дават резултат 

Function (нещо като switch в C# само че наобратно)
=> именуван лист от код
=> in (params) => произвежда някакъв резултат(тука е нашата функция) => out (return result)
=> са обекти, които могат да бъдат подавани на фунции и функции могат да връщат функции

Nested Function (Closure)
=> Една функция може да декларира вътре в своето тяло други функции 
да ги използва и когато тази функция върне резултат garbage collection-a да ги събере всичките

Разлика между params & args
params => когато дефинираме функцията
args => когато я извикваме