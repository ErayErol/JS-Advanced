LINK
=> https://www.youtube.com/watch?v=5gk4jbyt5O0&feature=youtu.be [ Наков 2020 Декември ]

Парадигма на програмиране
=> парадигма за програмиране или програмна парадигма представлява фундаменталния стил на програмиране. 
Има множество програмни парадигми, но основните сред тях са: обектно-ориентирано, императивно, функционално и декларативно

Функционално програмиране
=> алгоритмично мислене и функционално мислене са две противоположни неща
=> чистите функции са сърцето на функционалното програмиране
=> нямаме състояние
В компютърните науки функционално програмиране е парадигма за програмиране – стил за изграждането на структурата и елементите на 
компютърни програми, който третира като изчислява оценката на математически функции и избягва променящите състоянието непостоянни данни. 
Това е декларативна парадигма за програмиране, което означава, че програмирането се извършва с изрази. 
Във функционален код, изходната стойност на функция зависи само от аргументите, които са вложени по време на функцията, 
така призованата функция е два пъти с една и съща стойност за един аргумент Х и тя ще произведе същия резултат (Х) всеки път. 
Премахване на нежелани реакции, т.е. промени в състоянието, което не зависи от входовете на функцията, може да направи 
много по-лесно разбирането и да се предскаже поведението на една програма, което е един от основните
мотиви за развитието на функционално програмиране.

Функционално програмиране има своите корени в ламбда пресмятането, което е официална система, разработена през 1930 г., 
за да разследва изчислимост на дефиниция на функция, приложение функция и рекурсия. 
Много функционални езици за програмиране могат да бъдат разглеждани като изградени върху ламбда пресмятането. 
Друга добре позната декларативна парадигма за програмиране е логическото програмиране което, се основава на релацията.

За разлика, императивното програмиране променя състоянието, чрез команди в началния език, най-прост пример за това е задачата. 
Императивното програмиране наистина има функции, не в математическия смисъл, а в смисъл на подпрограми. 
Те могат да имат странични ефекти, които могат да променят стойността на програмата. 
Функции без стойности за връщане могат да доведат до това. Поради това, че те нямат референтна прозрачност, 
т.е. същия израз в друг език може да доведе до различни стойности по различно време в зависимост от състоянието на изпълняващата програмата.

Императивното програмиране (на латински: imperare = нареждам, заповядвам) 
=> е парадигма в програмирането, спрямо която една програма се състои от редица от команди, които определят какво и в 
какъв ред компютърът трябва да направи.

Декларативното програмиране
=> състоянието на програмата преминава през чисти функции

Чисти функции
=> сърцето на функционалното програмиране
=> използваме чисти функции, които изчисляват някаква стойност от която зависи само единствено от входа на функцията
примерно: функцията косинос в математика
подаваме някакво число и функцията смята косинос и връща дадено число
като подадем същото число пак ще ни върне същият отговор
корен квадратен от 5 цял живот ще връща един и същ резултат дори и за другият живот (завинаги)

Imperative vs. Declarative
https://www.youtube.com/watch?v=h718AoApVIk

Асинхронно/Конкурентно програмиране
=>паралелното изпълнение на няколко неща позволява, няколко парчета код да вървят едновременно

Монолитни приложения
=> вече не е модерно (било е 80-90те години)
=> всичко е в едно приложение (данни, логика, потребителски интерфейс и т.н.)
=> те по принцип не са свързани с интернет
=> данните се записват в локалната машина и не стоят в интернет
=> пример: тетрис на телефон или някакъв текстов редактор (notepad)

Клиент-сървър архитектурният модел
=> ползва се страшно много в уеб сайтове, игри, информационни системи, бизнес софтуер и т.н...
=> данните са в интернет (или част от данните) 
=> сървъра държи данни (бизнес логика)
=> това което виждаш на екрана е клиента
=> клиентите имплементират UI (User Interface) потребителският интерфейс
и после сървъра предоставя APIs (Application Programming Interface) 
това са видими от интернет действия, които можем да ги извикаме чрез програмен код
тоест да помолим сървъра да ни даде някакви данни за да си ги нарисуваме

API
=> фронт-енд си комуникира с бек-енд