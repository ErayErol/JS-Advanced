Обща култура:
1. Хард диска е едно от най-бавните неща
=> Достъпа до РАМ паметта е стотици хиляди пъти по-бърз от достъпа до хард диска 
=> Достъпа до процесора или интернет е по-бърз от достъпа до хард диска

1. DataBase Introduction
=> какъв е смисълът да използваме база данни?

2. CRUD
=> 4 основни манипулации с данните в базите данни, които можем да правим

3. Table Relations
=> релации (на бг- връзки) между записите в базите данни

4. Joins
=> как свързваме в рамките на един резултат данните от няколко таблици

5. Subqueries
=> заявка в заявката, когато искаме резултат от заявка да използваме като параметър на друга заявка

6. Index (важно + питат на интервю)
=> кое прави така, че да ни е бързо търсенето в базата данни
=> как са структурирани данните така че търсенето да е бързо

7. Triggers
=> действия, които се активират при определени условия 

8. Transactions
=> позволяват ни да изпълним няколко заявки на куп

MS SQL
=> езикът с който ние казваме на базата данните какво да направи с данните 
или казваме как да смени структурата от данните или казваме какви данни искаме да прочете
=> декоративен език => директно описваме какво искаме да се случи, какъв резултат да получем и т.н

Самите база данни не са се променяли от близо 25 години

SQL server management studio
=> програмата ние ще виждаме данните в базата данни
данните реално биват записани в самоястолно в базата данните формат
за да може да достъпваме тези данни на нас ни трябва клиент
както уеб приложенията, те си имат сървър отзад, но ние ги достъпваме чрез браузъра където ние ги наричаме клиент
Базите данни ги достъпваме по няколко различни начини
=> SQL server management studio
=> чрез конзолата (в 21 век никой не го прави)
=> C# код (ще говорим за това в следващият курс)

SQL Server
=> е програмата, което се занимава да разбира нашата заявка 
=> да изпълнява, да записва в данните, да се грижи за конкуренктноста, за secury-то и всички тези предимства

SQL server management studio (заедно с още 100 други програми)
=> този прозорец през, който ние достъпваме тази база данни визуално
=> виждаме списъка с таблици, виждаме списъка с редове, колони, самите данни, можем да ги едитваме 

RDBMS
=> софтуерът, който се занимава с това какво искаме ние да направим с данните и т.н.

Client => Engine => Database

Клиенти
=> SSMS / C#, софтуери, които прочитат казват на Engine какво да направи, разбират какво им е върнал
и под някаква форма с данните правят нещо
=> SSMS ни ги визуализира под формата на табличка
=> C# може да ги прочете и да ги получи под формата на списък от обекти от някъв клас

Engine-а
=> си има алгоритми за писане и четене в базата данни, за разбиране на заявката, структуриране на данните вътре върху хард диска

Database
=> Нещото на което ние записваме нашите данни

Instance
=> Ние ще използваме една инстанция за целият курс
=> Във всяка една инстанция, може да имаме различни база дани (пр: курсове, разходи, футболисти....)

Database и файлове
=> за всяка една база данни имаме по 2 файла (може да имаме 1000 таблици и пак имаме 2 файла)
1. mdf файл (пазят самите данни)
=> При добре подреден файл много лесно и бързо се намира това което търсим
От файл, който е примерно 10 гб, използва само 4 КБ, това добро подреждане наричаме индексация => това е първият файл
=> Ако един запис е бил прочет един път, той го пази временно в паметта на компютъра и следващият път,
когато е поискан същият запис е много вероятно да го има в паметта и да не се налага отново да се чете от хард диска този запис
2. ldf файл (пазят промените, за да може ако спре тока да тези промени да се преповторят - тоест да няма загуба на данни) 
=> В него се записва всяка една операция, която сме извършили в mdf файла => " всяка една транзакция, която съм приложил върху mdf файла "

Всяка една база данни съдържа в себе си таблици (най-важното в нея са данните)
Всеки един ред в тези таблици наричаме запис (ред-запис-entity = едно и също)
Всяка една колона има 
=> име (колона без име не може да съществува)
=> тип на данните (не може едновременно да е и число и файл и символен низ), типът трябва да бъде само 1 нещо
Където се пресичат ред и колона => наричаме клетка => клетката  съдържа някаква информация, някви данни

SQL
=> декоративен език (декоративните езици обесняват какво искат, пр: искам всички изпълнители, които започват с буквата Е)
=> с този език можем да правим абсолютно всичко с базата данни, които виждаме визуално
=> можем да правим всякаква комуникация от свързването с машината до края до последните неща които правим всичко става със заявка
=> с този език може да правим 4 основни и най-важните неща, които правим с един сървър
1.  Data Definition (DDL)
Да опишем структурата от данни (създаването на таблици, на колони, изтриването на колоно, създаването на база данни и т.н.)
Думи които ще срещнем => CREATE DROP
CREATE е за да направим физичезки нещо => колона, таблица, база и т.н
2.  Data Manipulation (DML)
=> Ние четем данните, записваме, изтриваме, и променяме 
Думи които ще срещнем => SELECT / INSERT / DELETE / UPDATE (WHERE, JOIN, TOP, LEFT, GROUB BY)
Функции => MIN/MAX/AVR, STRLEN, LIKE
3. Data Control (DCL)
=> Кой потребител има достъп до кои таблици, до кои бази има, какво може  да прави с тези данни и т.н
Думи които ще срещнем => GRAND, REVOKE
Grand е дай права 
Revoke e да махнеш права на някой от нещо
4. Transaction Control (TCL)
=> Транзакция => поредица от команди които трябва да се случат заедно като едно цяло
=> Позволява ни да групираме тази атонарност в acid
=> Да направя транзакция в която да вкарам няколко заявки и да кажа или минават всички заявки или нито една не минава (всичко или нищо)
Думи които ще срещнем => Start, Stop, Revert, Commit, Begin
Commit => запиши транзакцията

Синтаксис:
SELECT * FROM [Artists]
	WHERE [Name] = 'Eminem' (всеки един символен низ се слага в единични кавички) (няма значение дали е с малки букви или не той си ги намира)
	
SELECT => искам да чета данни
Какви данни => * (звездата означава всички колони, които са ми на разположение в тази таблица)
FROM => от къде (искате да прочетете данните, тук обикновенно седи име на таблица)
След FROM и името на таблицата => след това имаме различни варианти 
=> може да се сортират, може да се поискат само няколко от колоните, може да кажете и критерии като WHERE
WHERE => изберете само тези, за които колоната 
[Name] = 'Eminem' => Всички колони с име = Eminem 
[Name] LIKE 'Emi%' => Всички колони които започват с Emi
[Name] LIKE '%Emi%' => Всички колони които съдържат Emi по средата

Има два типа коментари
-- (две тирета) едно редов коментар
/*
...
...
... 
*/ много редов коментар

Типове данни
(целочислени)
=> bit (bool) => 0 (false), 1(true)
=> int (32bit)
=> bigint (64bit)
(дробни)
FLOAT, REAL, DECIMAL => те са с параметър (scale, precision) имаме два параметъра към този тип
пр: FLOAT(18,2) => 18 цифри прези запетая и 2 след запетая
(текстови)
те се различават по 2 оси
1. Първата ос е дали имат променлив размер или не 
1.1. Фиксиран (fixed)
1.2. Променлив (var)
2. Дали поддържат Unicode или не
Един символ в паметта на компютъра може да бъде записан по различни начина
Като 1 байт => (само 256 символа) ASCII => тук един символ = 1 байт
Като 2 байта => (до 65 000 символа) (комбинацията от 2 байта се нарича) Unicode => тук един символ = 2 байта
https://stackoverflow.com/questions/19212306/whats-the-difference-between-ascii-and-unicode
Ако имаме fixed ASCII => CHAR(5) => ще имам ASCII символи само с точен размер 5
Ако запишем 1,2,3 и другите 2 места ЩЕ бъдат попълнени с празни места [1],[2],[3],[],[]
Ако имаме var ASCII => VARCHAR(5) => ще имам ASCII символи с максимум размер 5
Ако запишем 1,2,3 и другите 2 места НЯМА да бъдат попълнени с празни места [1],[2],[3]
Ако имаме fixed Unicode => NCHAR(5) => ще имам Unicode символи само с точен размер 5
Ако запишем 1,2,3 и другите 2 места ЩЕ бъдат попълнени с празни места [1],[2],[3],[],[]
Ако имаме var Unicode => NVARCHAR(5) => ще имам Unicode символи с максимум размер 5
Ако запишем 1,2,3 и другите 2 места НЯМА да бъдат попълнени с празни места [1],[2],[3]
